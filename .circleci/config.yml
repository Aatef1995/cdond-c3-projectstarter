version: 2.1



commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [test-frontend]
      - run: 
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
     
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run: 
          name: Run frontend scan
          command: |   
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run: 
          name: Run backend scan
          command: |      
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: back-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople  \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople  \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar gzip
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
        # auth:
        #   username: ahmedatef1995  # can specify string literal values
        #   password: P@..ssworD1995  # or project environment variable reference
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["42:51:14:df:7b:0e:a7:00:6f:29:fe:39:50:ae:8b:c3"]

     # - run:
     #     name: Install dependencies
     #     command: |
     #        apk add ansible gzip openssh-client

      # attach workspace
      - attach_workspace:
          at: .

     # - run:
     #     name: Reading from inventory file
     #     command: |
     #       cat inventory.txt

      - run:
          name: Configure server
          command: |
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            cd backend
            npm install
            npm run premigrations
            npm run migrations
     # - run:
       #   name: Send migration results to memstash
       #   command: |
        #    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      # then
           # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
         #  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
           # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
        #   curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
    #   fi
     # Here's where you will add some code to rollback on failure 

  deploy-frontend:
    docker:
      - image: ahmedatef1995/myimage
    steps:
      - checkout
    # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${cat inventory.txt}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                          
workflows:
  default:
    jobs:
     # - build-frontend
     #- build-backend
     #- test-frontend:  
     #    requires: [build-frontend]   
     #- test-backend:
     #   requires: [build-backend]   
     #- scan-frontend:
     #   requires: [build-frontend]   
     #- scan-backend:
     #   requires: [build-backend]
     #- deploy-infrastructure
     #   requires: [test-frontend, test-backend, scan-frontend, scan-backend]
     #- configure-infrastructure
     #   requires: [deploy-infrastructure]    
      - run-migrations
    #    requires: [configure-infrastructure]
    #- deploy-frontend:
    #   requires: [run-migrations]

           
