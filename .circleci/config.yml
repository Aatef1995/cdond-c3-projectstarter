version: 2.1

orbs: 
    slack: circleci/slack@4.10.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>
            
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [test-frontend]
      - run: 
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run: 
          name: Run frontend scan
          command: |   
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run: 
          name: Run backend scan
          command: |      
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: back-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople  \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople  \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
       
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar gzip
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
      
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  


  configure-infrastructure:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
        # auth:
        #   username: ahmedatef1995  # can specify string literal values
        #   password: P@..ssworD1995  # or project environment variable reference
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["42:51:14:df:7b:0e:a7:00:6f:29:fe:39:50:ae:8b:c3"]

     # - run:
     #     name: Install dependencies
     #     command: |
     #        apk add ansible gzip openssh-client

      # attach workspace
      - attach_workspace:
          at: .

     # - run:
     #     name: Reading from inventory file
     #     command: |
     #       cat inventory.txt

      - run:
          name: Configure server
          command: |
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
      # Here's where you will add some code to rollback on failure 


  run-migrations:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            cd backend
            npm install
            npm run premigrations
            npm run migrations
     # - run:
       #   name: Send migration results to memstash
       #   command: |
        #    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      # then
           # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
         #  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
           # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
        #   curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
    #   fi
     # Here's where you will add some code to rollback on failure 


  deploy-frontend:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # Build the frontend
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        # Here's where you will add some code to rollback on failure   


  deploy-backend:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["42:51:14:df:7b:0e:a7:00:6f:29:fe:39:50:ae:8b:c3"]
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure     


  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export API_URL=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            
            echo "${API_URL}"
            if curl "${API_URL}:3030/api/status" | grep "ok"
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - destroy_environment
      - revert-migrations


  cloudfront-update:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo $OLD_WORKFLOW_ID >> ~/OLD_WORKFLOW_ID.txt
            cat ~/OLD_WORKFLOW_ID.txt
            #     # curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            #- run:
            #     name: Update cloudfront distribution
            #     command: |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople

            echo OLD_WORKFLOW_ID: "${OLD_WORKFLOW_ID}"
            echo Current Wokflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"  


  cleanup:
    docker:
      - image: ahmedatef1995/nodeimage:1.0
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
          
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 

            if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              then
              echo "Delete Confirmed"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
              else
                echo "Cannot Cleanup"
              fi


workflows:
  default:
    jobs:
      #  - build-frontend
      #  - build-backend
      #  - test-frontend:
      #      requires: [build-frontend]
      #  - test-backend:
      #      requires: [build-backend]
      #  - scan-backend:
      #      requires: [build-backend]
      #  - scan-frontend:
      #      requires: [build-frontend]
      # - deploy-infrastructure
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches: 
      #         only: [main]
      #  - configure-infrastructure:
      #       requires: [deploy-infrastructure]
      #  - run-migrations:
      #       requires: [configure-infrastructure]
      #  - deploy-frontend:
      #       requires: [deploy-infrastructure]
      #  - deploy-backend:
      #       requires: [run-migrations]
      #  - smoke-test:
      #       requires: [deploy-backend, deploy-frontend]
       - cloudfront-update
      #     requires: [smoke-test]
       - cleanup:
              requires: [cloudfront-update]
